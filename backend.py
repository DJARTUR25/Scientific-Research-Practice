import sys
import os
import tempfile
import numpy as np
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout,
                             QHBoxLayout, QLabel, QLineEdit, QPushButton, 
                             QFormLayout, QSpinBox, QTableWidget, QTableWidgetItem,
                             QDialog, QScrollArea, QCheckBox, QComboBox, QHeaderView,
                             QTabWidget, QMessageBox, QGroupBox, QProgressDialog,
                             QFileDialog, QSizePolicy, QTextEdit)
from PyQt5.QtCore import Qt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from matplotlib.colors import Normalize
import matplotlib.pyplot as plt
import math
import base64
from io import BytesIO

class HelpDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        self.setGeometry(100, 100, 1100, 800)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        self.base_dir = os.path.dirname(os.path.abspath(__file__))
        self.initial_conditions_dir = os.path.join(self.base_dir, "initial_conditions")
        
        layout = QVBoxLayout()
        
        self.tabs = QTabWidget()
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.setup_contents_tab()
        self.setup_problem_tab()
        self.setup_physics_tab()
        self.setup_initial_conditions_tab()
        self.setup_boundary_conditions_tab()
        self.setup_convective_tab()
        self.setup_source_tab()
        self.setup_method_tab()
        
        layout.addWidget(self.tabs)
        
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.close)
        layout.addWidget(close_btn)
        
        self.setLayout(layout)
    
    def setup_contents_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
        tab = QTextEdit()
        tab.setReadOnly(True)
        
        html_content = """
        <h1>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏</h1>
        
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–∫—É –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–Ω–≤–µ–∫—Ü–∏–∏-–¥–∏—Ñ—Ñ—É–∑–∏–∏. 
        –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π.</p>
        
        <h2>–ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è</h2>
        
        <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px;">
        <h3>üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:</h3>
        <ul style="font-size: 14px;">
            <li><a href="#problem">–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏</a> - –æ—Å–Ω–æ–≤–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ —É—Å–ª–æ–≤–∏—è</li>
            <li><a href="#physics">–§–∏–∑–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª</a> - –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —É—Ä–∞–≤–Ω–µ–Ω–∏—è</li>
            <li><a href="#initial">–ù–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</a> - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</li>
            <li><a href="#boundary">–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</a> - —É—Å–ª–æ–≤–∏—è –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –æ–±–ª–∞—Å—Ç–∏</li>
            <li><a href="#convective">–ö–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–π —á–ª–µ–Ω</a> - —Ç–∏–ø—ã –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞</li>
            <li><a href="#source">–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–ø–ª–∞</a> - –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π</li>
            <li><a href="#method">–ú–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è</a> - —á–∏—Å–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</li>
        </ul>
        </div>
        
        <h2>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã</h2>
        
        <p>–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–Ω–≤–µ–∫—Ü–∏–∏-–¥–∏—Ñ—Ñ—É–∑–∏–∏ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Ç–µ–ø–ª–∞. 
        –û–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –∏–∑–º–µ–Ω—è—è –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, 
        –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.</p>
        
        <p>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —á–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è, 
        –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.</p>
        """
        
        tab.setHtml(html_content)
        self.tabs.addTab(tab, "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
    
    def setup_problem_tab(self):
        tab = QTextEdit()
        tab.setReadOnly(True)
        tab.setHtml("""
        <h1><a name="problem">–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏</a></h1>
        
        <p>–í –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–µ—à–∞–µ—Ç—Å—è —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ–∫—Ü–∏–∏-–¥–∏—Ñ—Ñ—É–∑–∏–∏ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Ç–µ–ø–ª–∞ - –æ–¥–Ω–æ –∏–∑ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π 
        –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∏–∑–∏–∫–∏, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–µ—Ä–µ–Ω–æ—Å–∞. –≠—Ç–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–∞ 
        —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è: –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –∏ –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ.</p>
        
        <h2>–û—Å–Ω–æ–≤–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ</h2>
        
        <p style="text-align: center; font-size: 18px; font-weight: bold;">
        u<sub>t</sub> + C(u) ¬∑ u<sub>x</sub> = V ¬∑ u<sub>xx</sub> + f(x,t)
        </p>
        
        <p>–ó–¥–µ—Å—å u(x,t) –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —Ç–æ—á–∫–µ x –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ t. –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç 
        –∫–∞–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ø–æ–¥ –≤–ª–∏—è–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.</p>
        
        <h2>–û–±–ª–∞—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è</h2>
        
        <p>–†–∞—Å—á–µ—Ç—ã –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–π –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –æ—Ç x=0 –¥–æ x=1 –∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 
        –æ—Ç t=0 –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏ T. –¢–∞–∫–∞—è –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —É–¥–æ–±–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, 
        –∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã.</p>
        
        <h2>–ù–∞—á–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ</h2>
        
        <p>–í –Ω–∞—á–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ t=0 –∑–∞–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã u(x,0) = u‚ÇÄ(x). 
        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞—á–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π, –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π 
        –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.</p>
        
        <h2>–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</h2>
        
        <p>–ù–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö —Ä–∞—Å—á–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∑–∞–¥–∞—é—Ç—Å—è —É—Å–ª–æ–≤–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–æ–π. 
        –ù–∞ –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏, –∞ –Ω–∞ –ø—Ä–∞–≤–æ–π - —É—Å–ª–æ–≤–∏–µ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–∞ —Å –≤–Ω–µ—à–Ω–µ–π —Å—Ä–µ–¥–æ–π.</p>
        """)
        self.tabs.addTab(tab, "–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏")
    
    def setup_physics_tab(self):
        tab = QTextEdit()
        tab.setReadOnly(True)
        tab.setHtml("""
        <h1><a name="physics">–§–∏–∑–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª —É—Ä–∞–≤–Ω–µ–Ω–∏—è</a></h1>
        
        <p>–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ–∫—Ü–∏–∏-–¥–∏—Ñ—Ñ—É–∑–∏–∏ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —à–∏—Ä–æ–∫–∏–π –∫–ª–∞—Å—Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —è–≤–ª–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º 
        –≤–µ—â–µ—Å—Ç–≤–∞ –∏–ª–∏ —ç–Ω–µ—Ä–≥–∏–∏. –ö–∞–∂–¥—ã–π —á–ª–µ–Ω —É—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–º–µ–µ—Ç —á–µ—Ç–∫–∏–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 
        –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –º–µ—Ö–∞–Ω–∏–∑–º—É –ø–µ—Ä–µ–Ω–æ—Å–∞.</p>
        
        <h2>–ö–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å</h2>
        
        <p>–ß–ª–µ–Ω C(u)¬∑u<sub>x</sub> –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–º–µ—Å—Ç–µ 
        —Å–æ —Å—Ä–µ–¥–æ–π. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏:</p>
        
        <ul>
        <li><strong>–ì—Ä–∞–¥–∏–µ–Ω—Ç–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã</strong> - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ —Ç–µ–ø–ª–∞ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –∏–∑ –æ–±–ª–∞—Å—Ç–µ–π 
        —Å –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –≤ –æ–±–ª–∞—Å—Ç–∏ —Å –Ω–∏–∑–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π</li>
        <li><strong>–í–Ω–µ—à–Ω–∏–º–∏ —Å–∏–ª–∞–º–∏</strong> - –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤</li>
        <li><strong>–î–≤–∏–∂–µ–Ω–∏–µ–º —Å—Ä–µ–¥—ã</strong> - –º–∞–∫—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∂–∏–¥–∫–æ—Å—Ç–∏ –∏–ª–∏ –≥–∞–∑–∞, —É–≤–ª–µ–∫–∞—é—â–µ–µ –∑–∞ —Å–æ–±–æ–π —Ç–µ–ø–ª–æ</li>
        <li><strong>–°–∞–º–æ–≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ–º</strong> - –∫–æ–≥–¥–∞ —Å–∞–º–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–≤–æ–µ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞</li>
        </ul>
        
        <h2>–î–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å</h2>
        
        <p>–ß–ª–µ–Ω V¬∑u<sub>xx</sub> –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ - –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 
        —Å—Ç—Ä–µ–º–∏—Ç—Å—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ –≤—Å–µ–º—É –æ–±—ä–µ–º—É. –≠—Ç–æ—Ç –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è:</p>
        
        <ul>
        <li><strong>–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–π –¥–∏—Ñ—Ñ—É–∑–∏–∏</strong> - —Ö–∞–æ—Ç–∏—á–µ—Å–∫–æ–º—É —Ç–µ–ø–ª–æ–≤–æ–º—É –¥–≤–∏–∂–µ–Ω–∏—é –º–æ–ª–µ–∫—É–ª, 
        –ø—Ä–∏–≤–æ–¥—è—â–µ–º—É –∫ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–º—É –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—é</li>
        <li><strong>–¢–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç–∏</strong> - —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–µ–ø–ª–æ —á–µ—Ä–µ–∑ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç</li>
        <li><strong>–¢—É—Ä–±—É–ª–µ–Ω—Ç–Ω–æ–º—É –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—é</strong> - –≤ —Å–ª—É—á–∞–µ turbulent flows, –∫–æ–≥–¥–∞ —Ö–∞–æ—Ç–∏—á–µ—Å–∫–∏–µ 
        –¥–≤–∏–∂–µ–Ω–∏—è –≤–∏—Ö—Ä–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—é—Ç —Å—Ä–µ–¥—É</li>
        </ul>
        
        <p>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏—Ñ—Ñ—É–∑–∏–∏ V –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã. 
        –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –±—ã—Å—Ç—Ä–æ–º—É —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é —Ç–µ–ø–ª–∞, –º–∞–ª—ã–µ - –º–µ–¥–ª–µ–Ω–Ω–æ–º—É.</p>
        
        <h2>–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–ø–ª–∞</h2>
        
        <p>–§—É–Ω–∫—Ü–∏—è f(x,t) –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å–∏—Å—Ç–µ–º—É, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ –æ—Ç–Ω–∏–º–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é:</p>
        
        <ul>
        <li><strong>–¢–µ–ø–ª–æ–≤—ã–¥–µ–ª–µ–Ω–∏–µ</strong> - —Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏, —è–¥–µ—Ä–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –Ω–∞–≥—Ä–µ–≤</li>
        <li><strong>–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ</strong> - –∏—Å–ø–∞—Ä–µ–Ω–∏–µ, –∏–∑–ª—É—á–µ–Ω–∏–µ, –∫–æ–Ω—Ç–∞–∫—Ç —Å —Ö–æ–ª–æ–¥–Ω—ã–º–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—è–º–∏</li>
        <li><strong>–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è</strong> - —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, —Å–µ–∑–æ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</li>
        <li><strong>–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏</strong> - —Ç–æ—á–µ—á–Ω—ã–µ –∏–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–µ–ø–ª–æ–≤—ã–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è</li>
        </ul>
        
        <p>–°–æ—á–µ—Ç–∞–Ω–∏–µ —ç—Ç–∏—Ö —Ç—Ä–µ—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø–∏—Å—ã–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, 
        –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –≤ –ø—Ä–∏—Ä–æ–¥–µ –∏ —Ç–µ—Ö–Ω–∏–∫–µ.</p>
        """)
        self.tabs.addTab(tab, "–§–∏–∑–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª")
    
    def setup_initial_conditions_tab(self):
        tab = QTextEdit()
        tab.setReadOnly(True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ base64
        html_content = """
        <h1><a name="initial">–ù–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</a></h1>
        
        <p>–ù–∞—á–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –Ω–∞—á–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ t=0. 
        –û—Ç –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è —Å–∏–ª—å–Ω–æ –∑–∞–≤–∏—Å–∏—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏ –µ–≥–æ —ç–≤–æ–ª—é—Ü–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏. 
        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ—Å–µ–º—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π.</p>
        
        <div style="display: flex; flex-wrap: wrap; justify-content: space-between;">
        """
        
        # –°–ø–∏—Å–æ–∫ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        ics = [
            ("step.png", "–°—Ç—É–ø–µ–Ω—á–∞—Ç–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
             "u(x,0) = 1 –ø—Ä–∏ x < 0.5, -1 –ø—Ä–∏ x ‚â• 0.5", 
             "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è —Ä–µ–∑–∫–∏–º —Å–∫–∞—á–∫–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ü–µ–Ω—Ç—Ä–µ –æ–±–ª–∞—Å—Ç–∏. –¢–∞–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç –¥–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–µ—Ç–∫–æ–π –≥—Ä–∞–Ω–∏—Ü–µ–π."),
            
            ("gaussian.png", "–ì–∞—É—Å—Å–æ–≤ –ø–∞–∫–µ—Ç", 
             "u(x,0) = exp(-50¬∑(x-0.5)¬≤)", 
             "–ö–æ–ª–æ–∫–æ–ª–æ–æ–±—Ä–∞–∑–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º—É–º–æ–º –≤ —Ü–µ–Ω—Ç—Ä–µ. –ú–æ–¥–µ–ª–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–ø–ª–æ–≤–æ–π –∏–º–ø—É–ª—å—Å."),
            
            ("sinusoidal.png", "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
             "u(x,0) = sin(2œÄx)", 
             "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –æ–¥–Ω–æ–π –ø–æ–ª–Ω–æ–π –≤–æ–ª–Ω–æ–π –Ω–∞ –≤—Å–µ–π –æ–±–ª–∞—Å—Ç–∏. –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."),
            
            ("sawtooth.png", "–ü–∏–ª–æ–æ–±—Ä–∞–∑–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
             "u(x,0) = 2¬∑(x - floor(0.5 + x))", 
             "–õ–∏–Ω–µ–π–Ω–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å —Ä–µ–∑–∫–∏–º —Å–±—Ä–æ—Å–æ–º. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä—ã–≤–æ–≤."),
            
            ("linear.png", "–õ–∏–Ω–µ–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
             "u(x,0) = 1 - x", 
             "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –ª–∏–Ω–µ–π–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ç –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã –∫ –ø—Ä–∞–≤–æ–π."),
            
            ("quadratic.png", "–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
             "u(x,0) = 1 - x¬≤", 
             "–ü–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –Ω–∞ –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü–µ."),
            
            ("cubic.png", "–ö—É–±–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
             "u(x,0) = 1 - x¬≥", 
             "–ë–æ–ª–µ–µ –∫—Ä—É—Ç–æ–µ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–µ —É–±—ã–≤–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, —á–µ–º –ø—Ä–∏ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏."),
            
            ("exponential.png", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
             "u(x,0) = exp(-5x)", 
             "–ë—ã—Å—Ç—Ä–æ–µ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ç –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã.")
        ]
        
        for filename, title, formula, description in ics:
            img_path = os.path.join(self.initial_conditions_dir, filename)
            if os.path.exists(img_path):
                try:
                    with open(img_path, "rb") as f:
                        image_data = base64.b64encode(f.read()).decode()
                    html_content += f"""
                    <div style="width: 48%; margin-bottom: 25px; text-align: center; border: 1px solid #ddd; padding: 12px; border-radius: 5px;">
                        <h3 style="margin-top: 0;">{title}</h3>
                        <p style="font-family: monospace; background: #f8f8f8; padding: 8px; border-radius: 3px;">{formula}</p>
                        <img src="data:image/png;base64,{image_data}" alt="{title}" style="max-width: 100%; height: 180px; border: 1px solid #eee;">
                        <p style="color: #555; font-style: italic; text-align: left; margin-top: 10px;">{description}</p>
                    </div>
                    """
                except Exception as e:
                    html_content += f"""
                    <div style="width: 48%; margin-bottom: 25px; text-align: center; border: 1px solid #ddd; padding: 12px; border-radius: 5px;">
                        <h3 style="margin-top: 0;">{title}</h3>
                        <p style="font-family: monospace; background: #f8f8f8; padding: 8px; border-radius: 3px;">{formula}</p>
                        <p style="color: red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}</p>
                        <p style="color: #555; font-style: italic; text-align: left; margin-top: 10px;">{description}</p>
                    </div>
                    """
            else:
                html_content += f"""
                <div style="width: 48%; margin-bottom: 25px; text-align: center; border: 1px solid #ddd; padding: 12px; border-radius: 5px;">
                    <h3 style="margin-top: 0;">{title}</h3>
                    <p style="font-family: monospace; background: #f8f8f8; padding: 8px; border-radius: 3px;">{formula}</p>
                    <p style="color: red;">–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {img_path}</p>
                    <p style="color: #555; font-style: italic; text-align: left; margin-top: 10px;">{description}</p>
                </div>
                """
        
        html_content += """
        </div>
        
        <div style="background-color: #f0f8f0; padding: 15px; border-radius: 5px; margin-top: 20px;">
        <h3>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É:</h3>
        <p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–µ –∏–ª–∏ –≥–∞—É—Å—Å–æ–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - –æ–Ω–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç 
        —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è. –°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≤–æ–ª–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, 
        –∞ –ª–∏–Ω–µ–π–Ω–æ–µ –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏—Ö—Å—è —Ä–µ–∂–∏–º–æ–≤.</p>
        </div>
        """
        
        tab.setHtml(html_content)
        self.tabs.addTab(tab, "–ù–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
    
    def setup_boundary_conditions_tab(self):
        tab = QTextEdit()
        tab.setReadOnly(True)
        tab.setHtml("""
        <h1><a name="boundary">–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</a></h1>
        
        <p>–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞—Å—á–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å –≤–Ω–µ—à–Ω–µ–π —Å—Ä–µ–¥–æ–π. 
        –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.</p>
        
        <h2>–õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ (x = 0)</h2>
        
        <p style="text-align: center; font-size: 16px; font-weight: bold;">
        u<sub>x</sub> = 0
        </p>
        
        <p>–≠—Ç–æ —É—Å–ª–æ–≤–∏–µ –ù–µ–π–º–∞–Ω–∞, –∫–æ—Ç–æ—Ä–æ–µ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ—Ç–æ–∫–∞ —Ç–µ–ø–ª–∞ —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—É. 
        –§–∏–∑–∏—á–µ—Å–∫–∏ —ç—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ø–ª–æ–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–µ–Ω–∫–µ - —Ç–µ–ø–ª–æ –Ω–µ –º–æ–∂–µ—Ç –Ω–∏ —É—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —ç—Ç—É –≥—Ä–∞–Ω–∏—Ü—É, 
        –Ω–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑–≤–Ω–µ. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —É —Ç–∞–∫–æ–π –≥—Ä–∞–Ω–∏—Ü—ã –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤–æ–π –Ω–∞–∫–ª–æ–Ω.</p>
        
        <p>–¢–∞–∫–æ–µ —É—Å–ª–æ–≤–∏–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏–ª–∏ —Å–ª—É—á–∞–µ–≤, 
        –∫–æ–≥–¥–∞ –æ–¥–Ω–∞ –∏–∑ –≥—Ä–∞–Ω–∏—Ü –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–ø–ª–æ–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π.</p>
        
        <h2>–ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ (x = 1)</h2>
        
        <p style="text-align: center; font-size: 16px; font-weight: bold;">
        u<sub>x</sub> + (7/V)¬∑u = (7/V)¬∑(2/7)
        </p>
        
        <p>–≠—Ç–æ —Å–º–µ—à–∞–Ω–Ω–æ–µ –≥—Ä–∞–Ω–∏—á–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ (—É—Å–ª–æ–≤–∏–µ –†–æ–±–∏–Ω–∞), –∫–æ—Ç–æ—Ä–æ–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω —Å –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–æ–π. 
        –û–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ –ø–æ—Ç–æ–∫ —Ç–µ–ø–ª–∞ —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—É, —Ç–∞–∫ –∏ —Ä–∞–∑–Ω–æ—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –º–µ–∂–¥—É –≥—Ä–∞–Ω–∏—Ü–µ–π –∏ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–æ–π.</p>
        
        <p>–ü–∞—Ä–∞–º–µ—Ç—Ä 7/V –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–∞:</p>
        <ul>
        <li>–ü—Ä–∏ –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö V (—Å–∏–ª—å–Ω–∞—è –¥–∏—Ñ—Ñ—É–∑–∏—è) —É—Å–ª–æ–≤–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ —É—Å–ª–æ–≤–∏—é –î–∏—Ä–∏—Ö–ª–µ u = 2/7</li>
        <li>–ü—Ä–∏ –º–∞–ª—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö V (—Å–ª–∞–±–∞—è –¥–∏—Ñ—Ñ—É–∑–∏—è) –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ –ù–µ–π–º–∞–Ω–∞ u<sub>x</sub> = 0</li>
        </ul>
        
        <p>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–∞–≤–Ω–æ–π 2/7. –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è 
        –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ —Ä–µ—à–µ–Ω–∏—è –∏ —É–¥–æ–±—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞.</p>
        
        <h2>–§–∏–∑–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è</h2>
        
        <p>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –º–æ–¥–µ–ª–∏—Ä—É—é—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é: —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —Å–∏—Å—Ç–µ–º–∞ 
        —Ç–µ–ø–ª–æ–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–∞, —Å –¥—Ä—É–≥–æ–π - –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω —Å –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–æ–π –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã. 
        –¢–∞–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –∑–∞–¥–∞—á–∞—Ö —Ç–µ–ø–ª–æ–∑–∞—â–∏—Ç—ã –∑–¥–∞–Ω–∏–π 
        –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω—ã—Ö –∞–ø–ø–∞—Ä–∞—Ç–æ–≤.</p>
        
        <p>–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ –µ–≥–æ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å 
        –≤–æ –≤—Å–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.</p>
        """)
        self.tabs.addTab(tab, "–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
    
    def setup_convective_tab(self):
        tab = QTextEdit()
        tab.setReadOnly(True)
        tab.setHtml("""
        <h1><a name="convective">–ö–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–π —á–ª–µ–Ω</a></h1>
        
        <p>–ö–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–π —á–ª–µ–Ω C(u)¬∑u<sub>x</sub> –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã. 
        –í –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —á–ª–µ–Ω–∞, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 
        –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º—É –º–µ—Ö–∞–Ω–∏–∑–º—É.</p>
        
        <h2>Const - –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–æ–Ω–≤–µ–∫—Ü–∏—è</h2>
        
        <p><strong>C(u) = C</strong> (–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞, –∑–∞–¥–∞–≤–∞–µ–º–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)</p>
        
        <p>–≠—Ç–æ –ø—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞ –∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã. 
        –¢–∞–∫–∞—è –º–æ–¥–µ–ª—å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –≤—ã–Ω—É–∂–¥–µ–Ω–Ω–æ–π –∫–æ–Ω–≤–µ–∫—Ü–∏–∏, –∫–æ–≥–¥–∞ –¥–≤–∏–∂–µ–Ω–∏–µ —Å—Ä–µ–¥—ã —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏–ª–∞–º–∏ 
        (–Ω–∞—Å–æ—Å–æ–º, –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–º) –∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –ø–æ–ª—è.</p>
        
        <h2>0 - –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–≤–µ–∫—Ü–∏–∏</h2>
        
        <p><strong>C(u) = 0</strong></p>
        
        <p>–ü—Ä–∏ —ç—Ç–æ–º –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–π —á–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç–∏. 
        –≠—Ç–æ —á–∏—Å—Ç–æ –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è –∑–∞ —Å—á–µ—Ç —Ç–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç–∏, 
        –±–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞.</p>
        
        <h2>u - –ª–∏–Ω–µ–π–Ω–∞—è –∫–æ–Ω–≤–µ–∫—Ü–∏—è</h2>
        
        <p><strong>C(u) = u</strong></p>
        
        <p>–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ —Å–∞–º–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ. –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ª—É—á–∞—é, –∫–æ–≥–¥–∞ –±–æ–ª–µ–µ –Ω–∞–≥—Ä–µ—Ç—ã–µ 
        —É—á–∞—Å—Ç–∫–∏ —Å—Ä–µ–¥—ã –¥–≤–∏–∂—É—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ. –¢–∞–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —á–∞—Å—Ç–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –≤ –∑–∞–¥–∞—á–∞—Ö –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–Ω–≤–µ–∫—Ü–∏–∏, 
        –≥–¥–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–æ –∞—Ä—Ö–∏–º–µ–¥–æ–≤–æ–π —Å–∏–ª–æ–π, –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–∞–∑–Ω–æ—Å—Ç–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä.</p>
        
        <h2>u¬≤ - –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –∫–æ–Ω–≤–µ–∫—Ü–∏—è</h2>
        
        <p><strong>C(u) = u¬≤</strong></p>
        
        <p>–°–∏–ª—å–Ω–æ –Ω–µ–ª–∏–Ω–µ–π–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ä–∞—Å—Ç–µ—Ç –∫–∞–∫ –∫–≤–∞–¥—Ä–∞—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã. 
        –¢–∞–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å –≤ —Ç—É—Ä–±—É–ª–µ–Ω—Ç–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö –∏–ª–∏ –≤ —Å—Ä–µ–¥–∞—Ö —Å –æ—Å–æ–±–æ–π —Ä–µ–æ–ª–æ–≥–∏–µ–π. 
        –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –∫–æ–Ω–≤–µ–∫—Ü–∏—è –º–æ–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é —É–¥–∞—Ä–Ω—ã—Ö –≤–æ–ª–Ω –∏ –¥—Ä—É–≥–∏—Ö –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.</p>
        
        <h2>u¬≥ - –∫—É–±–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ–∫—Ü–∏—è</h2>
        
        <p><strong>C(u) = u¬≥</strong></p>
        
        <p>–ï—â–µ –±–æ–ª–µ–µ —Å–∏–ª—å–Ω–∞—è –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å, –∫–æ–≥–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –∫—É–±—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã. 
        –¢–∞–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. 
        –ö—É–±–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ–∫—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ–µ –∏ –±–æ–≥–∞—Ç–æ–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.</p>
        
        <h2>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É</h2>
        
        <div style="background-color: #fff8e1; padding: 15px; border-radius: 5px;">
        <p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–Ω–µ–π–Ω—É—é –∫–æ–Ω–≤–µ–∫—Ü–∏—é (u) - –æ–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ 
        –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Ä–µ—à–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º. –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–æ–Ω–≤–µ–∫—Ü–∏—è (Const) 
        —Ö–æ—Ä–æ—à–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤, –∞ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –∏ –∫—É–±–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ–∫—Ü–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å 
        –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π.</p>
        
        <p>–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–≤–µ–∫—Ü–∏–∏ (0) –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –∏–∑—É—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∞ —á–∏—Å—Ç–æ–π –¥–∏—Ñ—Ñ—É–∑–∏–∏ –≤ –æ–±—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å.</p>
        </div>
        """)
        self.tabs.addTab(tab, "–ö–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–π —á–ª–µ–Ω")
    
    def setup_source_tab(self):
        tab = QTextEdit()
        tab.setReadOnly(True)
        tab.setHtml("""
        <h1><a name="source">–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–ø–ª–∞</a></h1>
        
        <p>–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–ø–ª–∞ f(x,t) –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å–∏—Å—Ç–µ–º—É, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å 
        –∏–ª–∏ –æ—Ç–Ω–∏–º–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é. –í –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å–µ–º—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, 
        –æ—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π.</p>
        
        <h2>–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫</h2>
        
        <p><strong>f(t) = A</strong></p>
        
        <p>–ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ - –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –º–æ—â–Ω–æ—Å—Ç—å –Ω–∞–≥—Ä–µ–≤–∞ –∏–ª–∏ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è. 
        –ú–æ–¥–µ–ª–∏—Ä—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ —Ç–µ–ø–ª–æ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è –∏–ª–∏ –ø–æ–≥–ª–æ—â–∞–µ—Ç—Å—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–º—É –æ–±—ä–µ–º—É —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é.</p>
        
        <h2>–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏</h2>
        
        <p><strong>f(t) = A¬∑sin(œâ¬∑t)</strong></p>
        
        <p>–ò—Å—Ç–æ—á–Ω–∏–∫, –º–æ—â–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ø–æ —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏. 
        –ß–∞—Å—Ç–æ—Ç–∞ œâ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∫–æ–ª–µ–±–∞–Ω–∏–π. –¢–∞–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –º–æ–¥–µ–ª–∏—Ä—É—é—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, 
        –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—É—Ç–æ—á–Ω—ã–µ –∏–ª–∏ —Å–µ–∑–æ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–ª–Ω–µ—á–Ω–æ–π —Ä–∞–¥–∏–∞—Ü–∏–∏.</p>
        
        <h2>–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏</h2>
        
        <p><strong>f(t) = A¬∑cos(œâ¬∑t)</strong></p>
        
        <p>–ê–Ω–∞–ª–æ–≥–∏—á–µ–Ω —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–æ–º—É, –Ω–æ —Å–æ —Å–¥–≤–∏–≥–æ–º —Ñ–∞–∑—ã. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –≤ –º–æ–º–µ–Ω—Ç t=0. 
        –£–¥–æ–±–µ–Ω –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏.</p>
        
        <h2>–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É</h2>
        
        <p><strong>f(x) = A¬∑sin(œâ¬∑x)</strong></p>
        
        <p>–ò—Å—Ç–æ—á–Ω–∏–∫ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –º–æ—â–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ. 
        –ú–æ–¥–µ–ª–∏—Ä—É–µ—Ç –Ω–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–π –Ω–∞–≥—Ä–µ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª–µ–π 
        –∏–ª–∏ –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ –∏–∑–ª—É—á–µ–Ω–∏—è.</p>
        
        <h2>–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É</h2>
        
        <p><strong>f(x) = A¬∑cos(œâ¬∑x)</strong></p>
        
        <p>–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ-–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –º–∞–∫—Å–∏–º—É–º–æ–º –Ω–∞ –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü–µ. 
        –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–π, –∫–æ–≥–¥–∞ –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –Ω–∞–≥—Ä–µ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É –æ–¥–Ω–æ–π –∏–∑ –≥—Ä–∞–Ω–∏—Ü.</p>
        
        <h2>–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏</h2>
        
        <p><strong>f(x,t) = A¬∑sin(œâ_x¬∑x + œâ_t¬∑t)</strong></p>
        
        <p>–ò—Å—Ç–æ—á–Ω–∏–∫ –≤ –≤–∏–¥–µ –±–µ–≥—É—â–µ–π –≤–æ–ª–Ω—ã - –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ, –∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏. 
        –ú–æ–¥–µ–ª–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ—â–∞—é—â–∏–µ—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç–µ–ø–ª–∞ –∏–ª–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤—ã—Ö –≤–æ–ª–Ω.</p>
        
        <h2>–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏</h2>
        
        <p><strong>f(x,t) = A¬∑cos(œâ_x¬∑x + œâ_t¬∑t)</strong></p>
        
        <p>–ë–µ–≥—É—â–∞—è –≤–æ–ª–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–æ —Å–¥–≤–∏–≥–æ–º —Ñ–∞–∑—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.</p>
        
        <h2>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞</h2>
        
        <ul>
        <li><strong>A</strong> - –∞–º–ø–ª–∏—Ç—É–¥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –Ω–∞–≥—Ä–µ–≤–∞ –∏–ª–∏ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è</li>
        <li><strong>œâ_t</strong> - –≤—Ä–µ–º–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞, –∑–∞–¥–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏</li>
        <li><strong>œâ_x</strong> - –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ</li>
        </ul>
        
        
        <p>–ë–µ–≥—É—â–∏–µ –≤–æ–ª–Ω—ã (–∫–æ–º–±–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π) –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ 
        –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–æ —Ç—Ä–µ–±—É—é—Ç –±–æ–ª–µ–µ —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.</p>
        </div>
        """)
        self.tabs.addTab(tab, "–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–ø–ª–∞")
    
    def setup_method_tab(self):
        tab = QTextEdit()
        tab.setReadOnly(True)
        tab.setHtml("""
        <h1><a name="method">–ú–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</a></h1>
        
        <p>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —á–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–Ω–≤–µ–∫—Ü–∏–∏-–¥–∏—Ñ—Ñ—É–∑–∏–∏, 
        –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–µ –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –¥–∞–∂–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤.</p>
        
        <h2>–ß–∏—Å–ª–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞</h2>
        
        <p>–û—Å–Ω–æ–≤–æ–π —Ä–µ—à–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è <strong>–Ω–µ—è–≤–Ω–∞—è —Ä–∞–∑–Ω–æ—Å—Ç–Ω–∞—è —Å—Ö–µ–º–∞</strong>, –∫–æ—Ç–æ—Ä–∞—è –æ–±–ª–∞–¥–∞–µ—Ç –≤–∞–∂–Ω—ã–º 
        –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º - –±–µ–∑—É—Å–ª–æ–≤–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º 
        –ø—Ä–∏ –ª—é–±—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö —à–∞–≥–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É, —á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –∑–∞–¥–∞—á —Å –±–æ–ª—å—à–∏–º–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ 
        –∏ —Å–∏–ª—å–Ω–æ–π –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å—é.</p>
        
        <p>–î–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–∑–Ω–∏–∫–∞—é—â–∏—Ö —Å–∏—Å—Ç–µ–º –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è <strong>–º–µ—Ç–æ–¥ –ø—Ä–æ–≥–æ–Ω–∫–∏</strong> 
        (–∞–ª–≥–æ—Ä–∏—Ç–º –¢–æ–º–∞—Å–∞) - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Ç—Ä–µ—Ö–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —Å–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é O(N), 
        –≥–¥–µ N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ —Å–µ—Ç–∫–∏.</p>
        
        <h2>–ö–æ–Ω—Ç—Ä–æ–ª—å —Ç–æ—á–Ω–æ—Å—Ç–∏</h2>
        
        <p>–î–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç <strong>–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å–µ—Ç–∫—É</strong> 
        —Å —É–¥–≤–æ–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–∑–ª–æ–≤ –∫–∞–∫ –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É, —Ç–∞–∫ –∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π 
        –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å–µ—Ç–∫–∞—Ö –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –∏ —É–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.</p>
        
        <p>–≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–µ –†—É–Ω–≥–µ - –µ—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–≥—É—â–µ–Ω–Ω–æ–π —Å–µ—Ç–∫–µ –º–∞–ª–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è 
        –æ—Ç —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ, —Ç–æ –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å.</p>
        
        <h2>–ú–∞—Å—Å–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä</h2>
        
        <p>–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å—Ö–µ–º—ã –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞—Ö –∏ –≤ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö 
        –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è <strong>–º–∞—Å—Å–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä</strong>. –ü–∞—Ä–∞–º–µ—Ç—Ä Œ¥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–µ–ø–µ–Ω—å –µ–≥–æ –≤–ª–∏—è–Ω–∏—è:</p>
        
        <ul>
        <li>Œ¥ = 0 - –º–∞—Å—Å–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω</li>
        <li>Œ¥ > 0 - –º–∞—Å—Å–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Œ¥ = 0.125)</li>
        </ul>
        
        <p>–ú–∞—Å—Å–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–µ–Ω –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ä–∞–∑—Ä—ã–≤–Ω—ã–º–∏ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ 
        –∏ –≤ —Å–ª—É—á–∞—è—Ö —Å–∏–ª—å–Ω–æ–π –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏.</p>
        
        <h2>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏</h2>
        
        <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px;">
        <h3>üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:</h3>
        
        <ul>
        <li><strong>T</strong> - –≤—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏—Ä—É–µ–º–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
        <li><strong>Nx</strong> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É, –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π</li>
        <li><strong>Nt</strong> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑–≤–µ—Ä—Ç–∫–∏</li>
        <li><strong>V</strong> - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏—Ñ—Ñ—É–∑–∏–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã</li>
        <li><strong>Œ¥</strong> - –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –ø–æ–≤—ã—à–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å—Ö–µ–º—ã</li>
        <li><strong>C</strong> - –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —á–ª–µ–Ω–∞ (–¥–ª—è —Ç–∏–ø–∞ Const)</li>
        <li><strong>A, œâ_t, œâ_x</strong> - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–µ–ø–ª–∞</li>
        </ul>
        </div>
        
        <h2>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h2>
        
        <p>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</p>
        
        <h3>–ì—Ä–∞—Ñ–∏–∫ —Å–ª–æ—è</h3>
        <p>–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å 
        —Ä–µ—à–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–≤–æ–ª—é—Ü–∏—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.</p>
        
        <h3>–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞</h3>
        <p>–î–≤—É–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ u(x,t), –≥–¥–µ –ø–æ –æ—Å—è–º –æ—Ç–ª–æ–∂–µ–Ω—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∏ –≤—Ä–µ–º—è, 
        –∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–æ–¥–∏—Ä—É–µ—Ç—Å—è —Ü–≤–µ—Ç–æ–º. –û—á–µ–Ω—å –Ω–∞–≥–ª—è–¥–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –¥–∏–Ω–∞–º–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞.</p>
        
        <h3>–¢–∞–±–ª–∏—Ü–∞ —Ä–µ—à–µ–Ω–∏–π</h3>
        <p>–°–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ –≤—Å–µ—Ö —É–∑–ª–∞—Ö —Å–µ—Ç–∫–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏. 
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å.</p>
        
        <h3>–ê–Ω–∏–º–∞—Ü–∏—è</h3>
        <p>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è —ç–≤–æ–ª—é—Ü–∏—é —Ä–µ—à–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏. 
        –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.</p>
        
        <h2>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h2>
        
        <div style="background-color: #f0f8f0; padding: 15px; border-radius: 5px;">
        <p>–î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á —Ö–æ—Ä–æ—à–∏–º —Å—Ç–∞—Ä—Ç–æ–º —è–≤–ª—è—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:</p>
        <ul>
        <li>Nx = 100-200 (–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)</li>
        <li>Nt = 1000-5000 (–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏)</li>
        <li>V = 0.01-0.1 (—Ç–∏–ø–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á —Ç–µ–ø–ª–æ–ø–µ—Ä–µ–Ω–æ—Å–∞)</li>
        <li>–®–∞–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è = 10-20 (–±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –æ–±—ä–µ–º–æ–º –¥–∞–Ω–Ω—ã—Ö)</li>
        </ul>
        
        <p>–ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–µ—Ñ–∏–∑–∏—á–Ω—ã—Ö –æ—Å—Ü–∏–ª–ª—è—Ü–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏—Ñ—Ñ—É–∑–∏–∏ V 
        –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç—å –º–∞—Å—Å–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å Œ¥ = 0.125.</p>
        </div>
        """)
        self.tabs.addTab(tab, "–ú–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è")

class HeatmapWindow(QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Ä–µ—à–µ–Ω–∏—è")
        self.setGeometry(100, 100, 800, 600)
        
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        layout = QVBoxLayout(self.central_widget)
        
        self.fig = Figure(figsize=(10, 6))
        self.canvas = FigureCanvas(self.fig)
        layout.addWidget(self.canvas)
        
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É")
        self.save_btn.clicked.connect(self.save_heatmap)
        layout.addWidget(self.save_btn)
        
    def draw_heatmap(self, x_values, time_points, solution_history, cmap='viridis'):
        self.fig.clear()
        if not solution_history: 
            self.canvas.draw()
            return
            
        ax = self.fig.add_subplot(111)
        U = np.array(solution_history)
        X = x_values
        T = np.array(time_points)
        
        ax.invert_yaxis()
        abs_max = np.nanmax(np.abs(U))
        norm = Normalize(vmin=-abs_max, vmax=abs_max) if abs_max != 0 else Normalize()
        
        im = ax.imshow(U, aspect='auto', cmap=cmap,
                      extent=[X[0], X[-1], T[-1], T[0]],
                      interpolation='bilinear',
                      norm=norm)
        
        ax.set_title(f"–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–Ω–≤–µ–∫—Ü–∏–∏-–¥–∏—Ñ—Ñ—É–∑–∏–∏")
        ax.set_xlabel("–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, x [–º]")
        ax.set_ylabel("–í—Ä–µ–º—è, t [—Å]")
        self.fig.colorbar(im, label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, u")
        self.canvas.draw()
        
    def save_heatmap(self):
        options = QFileDialog.Options()
        filename, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É", "", 
                                                "PNG (*.png);;JPEG (*.jpg *.jpeg);;PDF (*.pdf);;SVG (*.svg)", 
                                                options=options)
        if filename:
            try:
                self.fig.savefig(filename, dpi=300, bbox_inches='tight')
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

class SolutionTableDialog(QDialog):
    def __init__(self, solution_data, control_solution, time_points, x_values, x_control_values, Nx, Nt, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–¢–∞–±–ª–∏—Ü–∞ —Ä–µ—à–µ–Ω–∏–π –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π")
        self.setMinimumSize(1400, 800)
        self.Nx = Nx
        self.Nt = Nt
        
        self.tabs = QTabWidget()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞
        self.main_table = QTableWidget()
        self.main_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.main_table.verticalHeader().setVisible(False)
        self.main_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)

        # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞
        self.control_table = QTableWidget()
        self.control_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.control_table.verticalHeader().setVisible(False)
        self.control_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)

        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        self.comparison_table = QTableWidget()
        self.comparison_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.comparison_table.verticalHeader().setVisible(False)
        self.comparison_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)

        self.fill_main_table(self.main_table, solution_data, time_points, x_values)
        self.fill_control_table(self.control_table, control_solution, time_points, x_control_values)
        self.fill_comparison_table(self.comparison_table, solution_data, control_solution, time_points, x_values, x_control_values)

        self.tabs.addTab(self.main_table, "–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞")
        self.tabs.addTab(self.control_table, "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞")
        self.tabs.addTab(self.comparison_table, "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–µ—Ç–æ–∫")

        self.export_btn = QPushButton("–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
        self.export_btn.clicked.connect(self.export_to_csv)
        
        layout = QVBoxLayout()
        layout.addWidget(self.tabs)
        layout.addWidget(self.export_btn)
        self.setLayout(layout)

        self.resize(QApplication.primaryScreen().availableSize() * 0.9)

    def fill_main_table(self, table, solution_data, time_points, x_values):
        num_layers = len(solution_data)
        num_x = len(x_values)
        table.setRowCount(num_layers + 1)  # +1 –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —É–∑–ª–æ–≤
        table.setColumnCount(num_x + 2)  # +2 –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Å–ª–æ—è –∏ –≤—Ä–µ–º–µ–Ω–∏

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        table.setHorizontalHeaderItem(0, QTableWidgetItem("‚Ññ —Å–ª–æ—è"))
        table.setHorizontalHeaderItem(1, QTableWidgetItem("t"))
        for col in range(num_x):
            table.setHorizontalHeaderItem(col+2, QTableWidgetItem(f"x={x_values[col]:.4f}"))

        # –°—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —É–∑–ª–æ–≤
        table.setItem(0, 0, QTableWidgetItem("–£–∑–µ–ª"))
        table.setItem(0, 1, QTableWidgetItem(""))
        for col in range(num_x):
            node_item = QTableWidgetItem()
            node_item.setData(Qt.DisplayRole, f"{col}")
            table.setItem(0, col+2, node_item)

        for row in range(num_layers):
            # –ù–æ–º–µ—Ä —Å–ª–æ—è
            layer_item = QTableWidgetItem()
            layer_item.setData(Qt.DisplayRole, f"{row}")
            table.setItem(row+1, 0, layer_item)
            
            # –í—Ä–µ–º—è
            time_item = QTableWidgetItem()
            time_item.setData(Qt.DisplayRole, f"{time_points[row]:.6g}")
            table.setItem(row+1, 1, time_item)
            
            # –ó–Ω–∞—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è
            for col in range(num_x):
                val = solution_data[row][col]
                item = QTableWidgetItem()
                
                if abs(val) < 1e-4 and abs(val) > 1e-10:
                    item.setData(Qt.DisplayRole, f"{val:.4e}")
                elif abs(val) < 1e-10:
                    item.setData(Qt.DisplayRole, "0")
                else:
                    item.setData(Qt.DisplayRole, f"{val:.6f}")
                
                table.setItem(row+1, col+2, item)
    
    def fill_control_table(self, table, solution_data, time_points, x_values):
        num_layers = len(solution_data)
        num_x = len(x_values)
        table.setRowCount(num_layers + 1)  # +1 –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —É–∑–ª–æ–≤
        table.setColumnCount(num_x + 2)  # +2 –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Å–ª–æ—è –∏ –≤—Ä–µ–º–µ–Ω–∏

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        table.setHorizontalHeaderItem(0, QTableWidgetItem("‚Ññ —Å–ª–æ—è"))
        table.setHorizontalHeaderItem(1, QTableWidgetItem("t"))
        for col in range(num_x):
            table.setHorizontalHeaderItem(col+2, QTableWidgetItem(f"x={x_values[col]:.4f}"))

        # –°—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —É–∑–ª–æ–≤
        table.setItem(0, 0, QTableWidgetItem("–£–∑–µ–ª"))
        table.setItem(0, 1, QTableWidgetItem(""))
        for col in range(num_x):
            node_item = QTableWidgetItem()
            node_item.setData(Qt.DisplayRole, f"{col}")
            table.setItem(0, col+2, node_item)

        for row in range(num_layers):
            # –ù–æ–º–µ—Ä —Å–ª–æ—è
            layer_item = QTableWidgetItem()
            layer_item.setData(Qt.DisplayRole, f"{row}")
            table.setItem(row+1, 0, layer_item)
            
            # –í—Ä–µ–º—è
            time_item = QTableWidgetItem()
            time_item.setData(Qt.DisplayRole, f"{time_points[row]:.6g}")
            table.setItem(row+1, 1, time_item)
            
            # –ó–Ω–∞—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è
            for col in range(num_x):
                val = solution_data[row][col]
                item = QTableWidgetItem()
                
                if abs(val) < 1e-4 and abs(val) > 1e-10:
                    item.setData(Qt.DisplayRole, f"{val:.4e}")
                elif abs(val) < 1e-10:
                    item.setData(Qt.DisplayRole, "0")
                else:
                    item.setData(Qt.DisplayRole, f"{val:.6f}")
                
                table.setItem(row+1, col+2, item)
    
    def fill_comparison_table(self, table, main_data, control_data, time_points, x_values, x_control_values):
        num_layers = len(main_data)
        num_x = len(x_values)
        table.setRowCount(num_layers + 1)  # +1 –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —É–∑–ª–æ–≤
        table.setColumnCount(num_x + 5)  # +5 –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Å–ª–æ—è, t, max|u2-u|, i_max, —Å—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["‚Ññ —Å–ª–æ—è", "t", "max|u2 - u|", "i_max", "–°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"]
        for col, header in enumerate(headers):
            table.setHorizontalHeaderItem(col, QTableWidgetItem(header))
        for col in range(num_x):
            table.setHorizontalHeaderItem(col+5, QTableWidgetItem(f"x={x_values[col]:.4f}"))

        # –°—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —É–∑–ª–æ–≤
        table.setItem(0, 0, QTableWidgetItem("–£–∑–µ–ª"))
        table.setItem(0, 1, QTableWidgetItem(""))
        table.setItem(0, 2, QTableWidgetItem(""))
        table.setItem(0, 3, QTableWidgetItem(""))
        table.setItem(0, 4, QTableWidgetItem(""))
        for col in range(num_x):
            node_item = QTableWidgetItem()
            node_item.setData(Qt.DisplayRole, f"{col}")
            table.setItem(0, col+5, node_item)

        for row in range(num_layers):
            # –ù–æ–º–µ—Ä —Å–ª–æ—è
            layer_item = QTableWidgetItem()
            layer_item.setData(Qt.DisplayRole, f"{row}")
            table.setItem(row+1, 0, layer_item)
            
            # –í—Ä–µ–º—è
            time_item = QTableWidgetItem()
            time_item.setData(Qt.DisplayRole, f"{time_points[row]:.6g}")
            table.setItem(row+1, 1, time_item)

            # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            u_control_interp = np.interp(x_values, x_control_values, control_data[row])
            
            # –†–∞—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
            diff = np.abs(u_control_interp - main_data[row])
            max_diff = np.max(diff)
            mean_diff = np.mean(diff)
            max_idx = np.argmax(diff)
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            max_item = QTableWidgetItem()
            max_item.setData(Qt.DisplayRole, f"{max_diff:.6f}")
            table.setItem(row+1, 2, max_item)
            
            # –ò–Ω–¥–µ–∫—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è —É–∑–ª–æ–≤)
            idx_item = QTableWidgetItem()
            idx_item.setData(Qt.DisplayRole, f"{max_idx}")
            table.setItem(row+1, 3, idx_item)
            
            # –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            mean_item = QTableWidgetItem()
            mean_item.setData(Qt.DisplayRole, f"{mean_diff:.6f}")
            table.setItem(row+1, 4, mean_item)
            
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ —É–∑–ª–∞–º
            for col in range(num_x):
                val = diff[col]
                item = QTableWidgetItem()

                if abs(val) < 1e-4 and abs(val) > 1e-10:
                    item.setData(Qt.DisplayRole, f"{val:.4e}")
                elif abs(val) < 1e-10:
                    item.setData(Qt.DisplayRole, "0")
                else:
                    item.setData(Qt.DisplayRole, f"{val:.6f}")

                if col == max_idx:
                    item.setBackground(Qt.yellow)
                
                table.setItem(row+1, col+5, item)
    
    def export_to_csv(self):
        try:
            options = QFileDialog.Options()
            base_name, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–π CSV", "", "CSV Files (*.csv)", options=options)
            if not base_name:
                return
            
            self.save_table_to_csv(self.main_table, base_name + "_main.csv")
            self.save_table_to_csv(self.control_table, base_name + "_control.csv")
            self.save_table_to_csv(self.comparison_table, base_name + "_comparison.csv")

            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV —Ñ–∞–π–ª—ã!")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
    
    def save_table_to_csv(self, table, filename):
        with open(filename, 'w', encoding='utf-8') as f:
            headers = []
            for col in range(table.columnCount()):
                headers.append(table.horizontalHeaderItem(col).text())
            f.write(",".join(headers) + "\n")

            for row in range(table.rowCount()):
                row_data = []
                for col in range(table.columnCount()):
                    item = table.item(row, col)
                    if item:
                        row_data.append(item.text().replace(',', '.'))
                    else:
                        row_data.append("")
                f.write(",".join(row_data) + "\n")

class ConvectionDiffusionApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.solution_history = []
        self.control_solution_history = []
        self.time_points = []
        self.x_values = []
        self.x_control_values = []
        self.current_params = {}
        self.need_recalculate = True
        self.cmap = 'viridis'
        self.global_max_diff = 0.0
        self.y_min, self.y_max = -1.5, 1.5
        self.heatmap_window = None
        self.Nx = 0
        self.Nt = 0
        self.initUI()
    
    def initUI(self):
        self.setWindowTitle("–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–Ω–≤–µ–∫—Ü–∏–∏-–¥–∏—Ñ—Ñ—É–∑–∏–∏ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º")
        self.setGeometry(100, 100, 1600, 900)
        
        self.layer_fig = Figure(figsize=(10, 6))
        self.layer_canvas = FigureCanvas(self.layer_fig)
        self.layer_canvas.setFocusPolicy(Qt.ClickFocus)
        self.layer_canvas.setFocus()

        main_container = QWidget()
        main_layout = QHBoxLayout(main_container)

        left_container = QWidget()
        left_layout = QVBoxLayout(left_container)
        left_container.setMinimumWidth(450)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞ —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.save_every_input = QLineEdit("10")
        self.T_input = QLineEdit("5.0")
        self.Nx_input = QLineEdit("200")
        self.Nt_input = QLineEdit("5000")
        self.diffusion_coeff_input = QLineEdit("0.01")
        self.layer_input = QSpinBox()
        self.time_input = QLineEdit("0.0")
        
        # –§–ª–∞–∂–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        self.mass_operator_cb = QCheckBox("–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –º–∞—Å—Å–æ–≤—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
        self.mass_operator_cb.setChecked(True)
        self.delta_input = QLineEdit("0.125")  # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        self.source_cb = QCheckBox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫")
        self.source_cb.setChecked(True)
        
        # –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        self.source_type_combo = QComboBox()
        self.source_type_combo.addItems([
            "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫",
            "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
            "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏", 
            "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É",
            "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É",
            "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏",
            "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏"
        ])
        self.source_type_combo.setCurrentText("–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏")  # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ü–æ–ª—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        self.source_amp_input = QLineEdit("3.0")  # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.source_freq_input = QLineEdit("1.0")  # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.source_freq_x_input = QLineEdit("5.0")
        self.source_freq_t_input = QLineEdit("5.0")
        
        # –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —á–ª–µ–Ω–∞
        self.convective_type_combo = QComboBox()
        self.convective_type_combo.addItems(["Const", "0", "u", "u^2", "u^3"])
        self.convective_type_combo.setCurrentText("u")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ü–æ–ª–µ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω—ã –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —á–ª–µ–Ω–∞
        self.convective_const_input = QLineEdit("1.0")

        self.form_layout = QFormLayout()
        self.form_layout.setFieldGrowthPolicy(QFormLayout.AllNonFixedFieldsGrow)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.form_layout.addRow(QLabel("–®–∞–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∏—Å–ª. —Ä–µ—à–µ–Ω–∏—è:"), self.save_every_input)
        self.form_layout.addRow(QLabel("–ì–æ—Ä–∏–∑–æ–Ω—Ç —Ä–∞—Å—á–µ—Ç–∞ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏:"), self.T_input)
        self.form_layout.addRow(QLabel("–ß–∏—Å–ª–æ —É—á–∞—Å—Ç–∫–æ–≤ —Ä–∞–∑–±–∏–µ–Ω–∏—è –ø–æ –æ—Å–∏ x (Nx):"), self.Nx_input)
        self.form_layout.addRow(QLabel("–ß–∏—Å–ª–æ —É—á–∞—Å—Ç–∫–æ–≤ —Ä–∞–∑–±–∏–µ–Ω–∏—è –ø–æ –æ—Å–∏ t (Nt):"), self.Nt_input)
        self.form_layout.addRow(QLabel("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏—Ñ—Ñ—É–∑–∏–∏ V:"), self.diffusion_coeff_input)
        
        # –ú–∞—Å—Å–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä (–±—É–¥–µ—Ç —Å–∫—Ä—ã–≤–∞—Ç—å—Å—è)
        self.mass_operator_row = self.form_layout.rowCount()
        self.form_layout.addRow(self.mass_operator_cb)
        self.delta_row = self.form_layout.rowCount()
        self.form_layout.addRow(QLabel("Œ¥ (–ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞):"), self.delta_input)
        
        # –ö–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–π —á–ª–µ–Ω
        self.form_layout.addRow(QLabel("–¢–∏–ø –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —á–ª–µ–Ω–∞ C(u):"), self.convective_type_combo)
        self.convective_const_row = self.form_layout.rowCount()
        self.form_layout.addRow(QLabel("–í–µ–ª–∏—á–∏–Ω–∞ C (–¥–ª—è —Ç–∏–ø–∞ Const):"), self.convective_const_input)
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ (–±—É–¥–µ—Ç —Å–∫—Ä—ã–≤–∞—Ç—å—Å—è)
        self.source_row = self.form_layout.rowCount()
        self.form_layout.addRow(self.source_cb)
        self.source_type_row = self.form_layout.rowCount()
        self.form_layout.addRow(QLabel("–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞:"), self.source_type_combo)
        self.source_amp_row = self.form_layout.rowCount()
        self.form_layout.addRow(QLabel("–ê–º–ø–ª–∏—Ç—É–¥–∞ –ê –∏—Å—Ç–æ—á–Ω–∏–∫–∞:"), self.source_amp_input)
        self.source_freq_row = self.form_layout.rowCount()
        self.form_layout.addRow(QLabel("–ß–∞—Å—Ç–æ—Ç–∞ (œâ) –∏—Å—Ç–æ—á–Ω–∏–∫–∞:"), self.source_freq_input)
        self.source_freq_x_row = self.form_layout.rowCount()
        self.form_layout.addRow(QLabel("–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ (œâ_x):"), self.source_freq_x_input)
        self.source_freq_t_row = self.form_layout.rowCount()
        self.form_layout.addRow(QLabel("–í—Ä–µ–º–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ (œâ_t):"), self.source_freq_t_input)
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.form_layout.addRow(QLabel("‚Ññ —Å–ª–æ—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:"), self.layer_input)
        self.form_layout.addRow(QLabel("–í—Ä–µ–º—è t, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –±–ª–∏–∂–Ω–∏–π —Å–ª–æ–π:"), self.time_input)
        
        self.run_btn = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç")
        self.table_btn = QPushButton("–¢–∞–±–ª–∏—Ü–∞ —Ä–µ—à–µ–Ω–∏–π")
        self.animate_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ —Å–ª–æ–µ–≤ –≤ GIF-–∞–Ω–∏–º–∞—Ü–∏–∏")
        self.show_heatmap_btn = QPushButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É")
        self.save_layer_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–ª–æ—è (–≤ .png)")
        self.help_btn = QPushButton("–°–ø—Ä–∞–≤–∫–∞")
        
        self.grid_cb = QCheckBox("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å–µ—Ç–∫—É")
        self.show_ic_cb = QCheckBox("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ")
        self.show_ic_cb.setChecked(True)

        self.form_layout.addRow(self.grid_cb)
        self.form_layout.addRow(self.show_ic_cb)
        
        self.init_initial_conditions_ui()
        
        stats_group = QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ—è")
        stats_layout = QFormLayout()
        
        self.stats_ic = QLabel("–ù–µ –∑–∞–¥–∞–Ω–æ")
        self.stats_max_diff = QLabel("0")
        self.stats_global_max_diff = QLabel("0")
        self.stats_max_diff_loc = QLabel("-")
        self.stats_mean_diff = QLabel("0")
        self.stats_source_val = QLabel("0")
        self.stats_grid_size = QLabel("-")
        self.stats_time_point = QLabel("-")
        self.stats_mass_operator = QLabel("–ù–µ—Ç")
        self.stats_source = QLabel("–ù–µ—Ç")
        self.stats_scheme = QLabel("–ù–µ—è–≤–Ω–∞—è —Å—Ö–µ–º–∞")
        self.stats_convective = QLabel("u")
        
        stats_layout.addRow(QLabel("–ù–∞—á. —É—Å–ª–æ–≤–∏–µ:"), self.stats_ic)
        stats_layout.addRow(QLabel("–ö–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–π —á–ª–µ–Ω:"), self.stats_convective)
        stats_layout.addRow(QLabel("–ú–∞–∫—Å. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (—Å–ª–æ–π):"), self.stats_max_diff)
        stats_layout.addRow(QLabel("–ú–∞–∫—Å. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–≤—Å—è —Å–µ—Ç–∫–∞):"), self.stats_global_max_diff)
        stats_layout.addRow(QLabel("–ú–µ—Å—Ç–æ –º–∞–∫—Å. –æ—Ç–∫–ª. (—Å–ª–æ–π, —É–∑–µ–ª):"), self.stats_max_diff_loc)
        stats_layout.addRow(QLabel("–°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:"), self.stats_mean_diff)
        stats_layout.addRow(QLabel("–ó–Ω–∞—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:"), self.stats_source_val)
        stats_layout.addRow(QLabel("–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏:"), self.stats_grid_size)
        stats_layout.addRow(QLabel("–í—Ä–µ–º—è —Å–ª–æ—è:"), self.stats_time_point)
        stats_layout.addRow(QLabel("–ú–∞—Å—Å–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä:"), self.stats_mass_operator)
        stats_layout.addRow(QLabel("–ò—Å—Ç–æ—á–Ω–∏–∫:"), self.stats_source)
        stats_layout.addRow(QLabel("–°—Ö–µ–º–∞ —Ä–µ—à–µ–Ω–∏—è:"), self.stats_scheme)
        
        stats_group.setLayout(stats_layout)
        stats_group.setMaximumHeight(350)
        
        btn_layout = QVBoxLayout()
        btn_layout.addWidget(self.run_btn)
        btn_layout.addWidget(self.table_btn)
        btn_layout.addWidget(self.animate_btn)
        btn_layout.addWidget(self.show_heatmap_btn)
        btn_layout.addWidget(self.save_layer_btn)
        btn_layout.addWidget(self.help_btn)

        left_layout.addLayout(self.form_layout)
        left_layout.addWidget(stats_group)
        left_layout.addLayout(btn_layout)

        right_container = QWidget()
        right_layout = QVBoxLayout(right_container)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏
        problem_group = QGroupBox("–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏")
        problem_layout = QVBoxLayout()
        
        self.problem_label = QLabel(
            "–£—Ä–∞–≤–Ω–µ–Ω–∏–µ: u_t + C(u) * u_x = V * u_xx + f(x,t)\n"
            "x ‚àà [0, 1]\n"
            "–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:\n"
            "  –ü—Ä–∏ x=0: u_x = 0\n"
            "  –ü—Ä–∏ x=1: u_x + (7/V)*u = (7/V)*(2/7)\n"
            "–ù–∞—á–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: –Ω–µ –∑–∞–¥–∞–Ω–æ\n"
            "–°—Ö–µ–º–∞ —Ä–µ—à–µ–Ω–∏—è: –Ω–µ—è–≤–Ω–∞—è"
        )
        self.problem_label.setWordWrap(True)
        self.problem_label.setStyleSheet("padding: 10px;")
        
        problem_layout.addWidget(self.problem_label)
        problem_group.setLayout(problem_layout)
        problem_group.setMaximumHeight(200)
        
        right_layout.addWidget(problem_group)
        right_layout.addWidget(self.layer_canvas)

        main_layout.addWidget(left_container)
        main_layout.addWidget(right_container)
        self.setCentralWidget(main_container)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.run_btn.clicked.connect(self.run_simulation)
        self.table_btn.clicked.connect(self.show_solution_table)
        self.animate_btn.clicked.connect(self.create_animation)
        self.layer_input.valueChanged.connect(self.draw_layer)
        self.show_heatmap_btn.clicked.connect(self.show_heatmap)
        self.save_layer_btn.clicked.connect(self.save_layer_plot)
        self.time_input.returnPressed.connect(self.find_layer_by_time)
        self.grid_cb.stateChanged.connect(self.redraw_current_layer)
        self.show_ic_cb.stateChanged.connect(self.redraw_current_layer)
        self.mass_operator_cb.stateChanged.connect(self.update_mass_operator_visibility)
        self.source_cb.stateChanged.connect(self.update_source_visibility)
        self.source_type_combo.currentTextChanged.connect(self.update_source_fields_visibility)
        self.convective_type_combo.currentTextChanged.connect(self.update_convective_const_visibility)
        self.help_btn.clicked.connect(self.show_help)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–µ–π
        self.update_mass_operator_visibility()
        self.update_source_visibility()
        self.update_source_fields_visibility()
        self.update_convective_const_visibility()

        self.draw_empty_layer()

    def update_mass_operator_visibility(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–µ–π –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        visible = self.mass_operator_cb.isChecked()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Œ¥
        label = self.form_layout.itemAt(self.delta_row, QFormLayout.LabelRole)
        field = self.form_layout.itemAt(self.delta_row, QFormLayout.FieldRole)
        
        if label:
            label.widget().setVisible(visible)
        if field:
            field.widget().setVisible(visible)

    def update_source_visibility(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–µ–π –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        visible = self.source_cb.isChecked()
        
        # –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
        for row in range(self.source_type_row, self.source_freq_t_row + 1):
            label = self.form_layout.itemAt(row, QFormLayout.LabelRole)
            field = self.form_layout.itemAt(row, QFormLayout.FieldRole)
            
            if label:
                label.widget().setVisible(visible)
            if field:
                field.widget().setVisible(visible)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        self.update_source_fields_visibility()

    def update_source_fields_visibility(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
        if not self.source_cb.isChecked():
            return
            
        source_type = self.source_type_combo.currentText()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã
        show_amp = True  # –ê–º–ø–ª–∏—Ç—É–¥–∞ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞
        show_freq = source_type in ["–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏", 
                                  "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É", "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É"]
        show_freq_x = source_type in ["–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏", "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏"]
        show_freq_t = source_type in ["–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏", "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if source_type == "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫":
            self.form_layout.itemAt(self.source_amp_row, QFormLayout.LabelRole).widget().setText("–í–µ–ª–∏—á–∏–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:")
        else:
            self.form_layout.itemAt(self.source_amp_row, QFormLayout.LabelRole).widget().setText("–ê–º–ø–ª–∏—Ç—É–¥–∞ –ê –∏—Å—Ç–æ—á–Ω–∏–∫–∞:")
        
        if source_type in ["–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏"]:
            self.form_layout.itemAt(self.source_freq_row, QFormLayout.LabelRole).widget().setText("–ß–∞—Å—Ç–æ—Ç–∞ (œâ) –∏—Å—Ç–æ—á–Ω–∏–∫–∞:")
        elif source_type in ["–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É", "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É"]:
            self.form_layout.itemAt(self.source_freq_row, QFormLayout.LabelRole).widget().setText("–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ (œâ):")
        else:
            self.form_layout.itemAt(self.source_freq_row, QFormLayout.LabelRole).widget().setText("–ß–∞—Å—Ç–æ—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–ª–µ–π
        self.form_layout.itemAt(self.source_amp_row, QFormLayout.LabelRole).widget().setVisible(show_amp)
        self.form_layout.itemAt(self.source_amp_row, QFormLayout.FieldRole).widget().setVisible(show_amp)
        
        self.form_layout.itemAt(self.source_freq_row, QFormLayout.LabelRole).widget().setVisible(show_freq)
        self.form_layout.itemAt(self.source_freq_row, QFormLayout.FieldRole).widget().setVisible(show_freq)
        
        self.form_layout.itemAt(self.source_freq_x_row, QFormLayout.LabelRole).widget().setVisible(show_freq_x)
        self.form_layout.itemAt(self.source_freq_x_row, QFormLayout.FieldRole).widget().setVisible(show_freq_x)
        
        self.form_layout.itemAt(self.source_freq_t_row, QFormLayout.LabelRole).widget().setVisible(show_freq_t)
        self.form_layout.itemAt(self.source_freq_t_row, QFormLayout.FieldRole).widget().setVisible(show_freq_t)

    def update_convective_const_visibility(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω—ã –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —á–ª–µ–Ω–∞"""
        convective_type = self.convective_type_combo.currentText()
        visible = (convective_type == "Const")
        
        label = self.form_layout.itemAt(self.convective_const_row, QFormLayout.LabelRole)
        field = self.form_layout.itemAt(self.convective_const_row, QFormLayout.FieldRole)
        
        if label:
            label.widget().setVisible(visible)
        if field:
            field.widget().setVisible(visible)

    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–ø—Ä–∞–≤–∫–∏"""
        help_dialog = HelpDialog(self)
        help_dialog.exec_()

    def init_initial_conditions_ui(self):
        self.ic_combo = QComboBox()
        self.ic_combo.addItems([
            "–°—Ç—É–ø–µ–Ω—á–∞—Ç–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
            "–ì–∞—É—Å—Å–æ–≤ –ø–∞–∫–µ—Ç", 
            "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
            "–ü–∏–ª–æ–æ–±—Ä–∞–∑–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
            "–õ–∏–Ω–µ–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
            "–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
            "–ö—É–±–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
            "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
        ])
        self.form_layout.addRow(QLabel("–ù–∞—á–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ:"), self.ic_combo)
        self.ic_combo.currentTextChanged.connect(self._handle_param_change)

    def _handle_param_change(self):
        self.need_recalculate = True

    def get_initial_condition(self, x):
        ic_type = self.ic_combo.currentText()
        L = x[-1]
        
        if ic_type == "–°—Ç—É–ø–µ–Ω—á–∞—Ç–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
            return np.where(x < L/2, 1.0, -1.0)
        
        elif ic_type == "–ì–∞—É—Å—Å–æ–≤ –ø–∞–∫–µ—Ç":
            return np.exp(-50 * (x - L/2)**2)
        
        elif ic_type == "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
            return np.sin(2 * np.pi * x / L)
        
        elif ic_type == "–ü–∏–ª–æ–æ–±—Ä–∞–∑–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
            return 2 * (x / L - np.floor(0.5 + x / L))
        
        elif ic_type == "–õ–∏–Ω–µ–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
            return 1.0 - x/L
        
        elif ic_type == "–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
            return 1.0 - (x/L)**2
        
        elif ic_type == "–ö—É–±–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
            return 1.0 - (x/L)**3
        
        elif ic_type == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
            return np.exp(-5*x/L)
        
        else:
            return np.sin(2 * np.pi * x / L)
    
    def get_initial_condition_equation(self):
        ic_type = self.ic_combo.currentText()
        
        if ic_type == "–°—Ç—É–ø–µ–Ω—á–∞—Ç–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
            return "u(x,0) = 1.0 –ø—Ä–∏ x < 0.5, -1.0 –ø—Ä–∏ x ‚â• 0.5"
        
        elif ic_type == "–ì–∞—É—Å—Å–æ–≤ –ø–∞–∫–µ—Ç":
            return "u(x,0) = exp(-50*(x-0.5)^2)"
        
        elif ic_type == "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
            return "u(x,0) = sin(2œÄx)"
        
        elif ic_type == "–ü–∏–ª–æ–æ–±—Ä–∞–∑–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
            return "u(x,0) = 2*(x - floor(0.5 + x))"
        
        elif ic_type == "–õ–∏–Ω–µ–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
            return "u(x,0) = 1.0 - x"
        
        elif ic_type == "–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
            return "u(x,0) = 1.0 - x^2"
        
        elif ic_type == "–ö—É–±–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
            return "u(x,0) = 1.0 - x^3"
        
        elif ic_type == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
            return "u(x,0) = exp(-5x)"
        
        else:
            return "u(x,0) = sin(2œÄx)"
    
    def get_convective_coefficient(self, u_value):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —á–ª–µ–Ω–∞"""
        convective_type = self.convective_type_combo.currentText()
        
        if convective_type == "Const":
            try:
                return float(self.convective_const_input.text())
            except:
                return 1.0
        elif convective_type == "0":
            return 0.0
        elif convective_type == "u":
            return u_value
        elif convective_type == "u^2":
            return u_value ** 2
        elif convective_type == "u^3":
            return u_value ** 3
        else:
            return u_value
    
    def get_convective_equation(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —á–ª–µ–Ω–∞"""
        convective_type = self.convective_type_combo.currentText()
        
        if convective_type == "Const":
            try:
                C = self.convective_const_input.text()
                return f"C(u) = {C}"
            except:
                return "C(u) = 1.0"
        elif convective_type == "0":
            return "C(u) = 0"
        elif convective_type == "u":
            return "C(u) = u"
        elif convective_type == "u^2":
            return "C(u) = u¬≤"
        elif convective_type == "u^3":
            return "C(u) = u¬≥"
        else:
            return "C(u) = u"
    
    def source_function(self, t, x=None):
        if not self.source_cb.isChecked():
            return 0.0
            
        try:
            A = float(self.source_amp_input.text())
            source_type = self.source_type_combo.currentText()
            
            if source_type == "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫":
                return A
                
            elif source_type == "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏":
                œâ = float(self.source_freq_input.text())
                return A * math.sin(œâ * t)
                
            elif source_type == "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏":
                œâ = float(self.source_freq_input.text())
                return A * math.cos(œâ * t)
                
            elif source_type == "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É":
                if x is None:
                    return 0.0
                œâ = float(self.source_freq_input.text())
                return A * math.sin(œâ * x)
                
            elif source_type == "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É":
                if x is None:
                    return 0.0
                œâ = float(self.source_freq_input.text())
                return A * math.cos(œâ * x)
                
            elif source_type == "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏":
                if x is None:
                    return 0.0
                œâ_x = float(self.source_freq_x_input.text())
                œâ_t = float(self.source_freq_t_input.text())
                return A * math.sin(œâ_x * x + œâ_t * t)
                
            elif source_type == "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏":
                if x is None:
                    return 0.0
                œâ_x = float(self.source_freq_x_input.text())
                œâ_t = float(self.source_freq_t_input.text())
                return A * math.cos(œâ_x * x + œâ_t * t)
                
            else:
                return 0.0
        except:
            return 0.0
    
    def get_source_equation(self):
        if not self.source_cb.isChecked():
            return "f(x,t) = 0"
            
        source_type = self.source_type_combo.currentText()
        A = self.source_amp_input.text()
        
        if source_type == "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫":
            return f"f(x,t) = {A}"
            
        elif source_type == "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏":
            œâ = self.source_freq_input.text()
            return f"f(x,t) = {A}¬∑sin({œâ}¬∑t)"
            
        elif source_type == "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏":
            œâ = self.source_freq_input.text()
            return f"f(x,t) = {A}¬∑cos({œâ}¬∑t)"
            
        elif source_type == "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É":
            œâ = self.source_freq_input.text()
            return f"f(x,t) = {A}¬∑sin({œâ}¬∑x)"
            
        elif source_type == "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É":
            œâ = self.source_freq_input.text()
            return f"f(x,t) = {A}¬∑cos({œâ}¬∑x)"
            
        elif source_type == "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏":
            œâ_x = self.source_freq_x_input.text()
            œâ_t = self.source_freq_t_input.text()
            return f"f(x,t) = {A}¬∑sin({œâ_x}¬∑x + {œâ_t}¬∑t)"
            
        elif source_type == "–ö–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏":
            œâ_x = self.source_freq_x_input.text()
            œâ_t = self.source_freq_t_input.text()
            return f"f(x,t) = {A}¬∑cos({œâ_x}¬∑x + {œâ_t}¬∑t)"
            
        else:
            return "f(x,t) = 0"
    
    def find_layer_by_time(self):
        try:
            target_time = float(self.time_input.text())
            
            if not self.time_points:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–∞–Ω–Ω—ã–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã!")
                return

            layer_index = 0
            min_diff = float('inf')
            found_index = -1
            
            for i, t in enumerate(self.time_points):
                diff = target_time - t
                if diff >= 0 and diff < min_diff:
                    min_diff = diff
                    found_index = i
                    
            if found_index >= 0:
                self.layer_input.setValue(found_index)
                self.draw_layer(found_index)
            else:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                   f"–°–ª–æ–π —Å –≤—Ä–µ–º–µ–Ω–µ–º ‚â§ {target_time} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª–æ–π.")
                self.layer_input.setValue(0)
                self.draw_layer(0)
                
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏!")

    def redraw_current_layer(self):
        if self.solution_history:
            self.draw_layer(self.layer_input.value())

    def run_simulation(self):
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            save_every_text = self.save_every_input.text()
            if not save_every_text.isdigit() or int(save_every_text) <= 0:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–®–∞–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                return
            
            T = float(self.T_input.text())
            self.Nx = int(self.Nx_input.text())
            self.Nt = int(self.Nt_input.text())
            diffusion_coeff = float(self.diffusion_coeff_input.text())
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            if self.mass_operator_cb.isChecked():
                delta = float(self.delta_input.text())
            else:
                delta = 0.0
                
            save_every = int(save_every_text)
            
            L = 1.0
            h = L / self.Nx
            x = np.linspace(0, L, self.Nx + 1)
            u0 = self.get_initial_condition(x)
            u_max = np.max(np.abs(u0))
            
            Re_c = u_max * h / diffusion_coeff if diffusion_coeff > 0 else float('inf')

            if Re_c > 2:
                min_Nx = int(np.ceil(u_max * L / (2 * diffusion_coeff)) + 1) if diffusion_coeff > 0 else self.Nx * 4
                min_diffusion_coeff = u_max * h / 2

                advice = []
                if diffusion_coeff < 1e-5:
                    advice.append("1. –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏—Ñ—Ñ—É–∑–∏–∏ (V) –¥–æ —Ö–æ—Ç—è –±—ã 0.001")
                elif h > 0.01:
                    advice.append("1. –£–º–µ–Ω—å—à–∏—Ç–µ —à–∞–≥ —Å–µ—Ç–∫–∏ (—É–≤–µ–ª–∏—á—å—Ç–µ Nx) –¥–æ {} –∏–ª–∏ –±–æ–ª–µ–µ".format(min_Nx))
                else:
                    advice.append("1. –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏—Ñ—Ñ—É–∑–∏–∏ –¥–æ {:.4f} –∏–ª–∏ –±–æ–ª–µ–µ".format(min_diffusion_coeff))
                
                advice.append("2. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã 'upwind' –≤–º–µ—Å—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–Ω–æ—Å—Ç–µ–π")
                if self.mass_operator_cb.isChecked():
                    advice.append("3. –£–≤–µ–ª–∏—á—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä Œ¥ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
                
                msg = (
                    "–í–Ω–∏–º–∞–Ω–∏–µ! –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –Ω–µ—Ñ–∏–∑–∏—á–Ω—ã–µ –æ—Å—Ü–∏–ª–ª—è—Ü–∏–∏!\n"
                    "–°–µ—Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ –†–µ–π–Ω–æ–ª—å–¥—Å–∞ Re_c = {:.2f} > 2\n\n"
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:\n{}"
                ).format(Re_c, "\n".join(advice))
                
                msg_box = QMessageBox(QMessageBox.Warning, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Å—Ü–∏–ª–ª—è—Ü–∏—è—Ö", msg, 
                                     QMessageBox.Ok | QMessageBox.Cancel, self)
                
                if msg_box.exec_() == QMessageBox.Cancel:
                    return
            
            x, solution, time_points = self.solve_equation(T, self.Nx, self.Nt, diffusion_coeff, delta, save_every)
            
            self.solve_control_grid(T, self.Nx, self.Nt, diffusion_coeff, delta, save_every)

            self.layer_input.setMaximum(len(self.solution_history)-1)
            self.layer_input.setValue(0)
            self.draw_layer(0)
            self.need_recalculate = False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏–µ–º
            ic_type = self.ic_combo.currentText()
            ic_equation = self.get_initial_condition_equation()
            source_equation = self.get_source_equation()
            convective_equation = self.get_convective_equation()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏
            problem_text = f"–£—Ä–∞–≤–Ω–µ–Ω–∏–µ: u_t + {convective_equation} * u_x = V * u_xx"
            if self.source_cb.isChecked():
                problem_text += " + " + source_equation.split('=')[1].strip()
            problem_text += "\nx ‚àà [0, 1]\n"
            problem_text += "–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:\n"
            problem_text += "  –ü—Ä–∏ x=0: u_x = 0\n"
            problem_text += "  –ü—Ä–∏ x=1: u_x + (7/V)*u = (7/V)*(2/7)\n"
            problem_text += f"–ù–∞—á–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: {ic_type}\n"
            problem_text += f"{ic_equation}\n"
            problem_text += "–°—Ö–µ–º–∞ —Ä–µ—à–µ–Ω–∏—è: –Ω–µ—è–≤–Ω–∞—è"
            
            self.problem_label.setText(problem_text)

            self.calculate_global_max_diff()
            
            if self.heatmap_window and self.heatmap_window.isVisible():
                self.heatmap_window.draw_heatmap(self.x_values, self.time_points, self.solution_history, self.cmap)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {str(e)}")

    def solve_equation(self, T, Nx, Nt, diffusion_coeff, delta, save_every):
        L = 1.0
        h = L / Nx
        tau = T / Nt
        
        x = np.linspace(0, L, Nx + 1)
        u_n = self.get_initial_condition(x)
        
        u_env = 2/7
        H = 7
        
        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        u_n[0] = u_n[1]
        u_n[-1] = (diffusion_coeff * u_n[-2] + H * h * u_env) / (diffusion_coeff + H * h)
        
        self.solution_history = [u_n.copy()]
        self.time_points = [0.0]
        self.x_values = x
        
        a = np.zeros(Nx + 1)
        b = np.zeros(Nx + 1)
        c = np.zeros(Nx + 1)
        d = np.zeros(Nx + 1)

        sigma = diffusion_coeff * tau / (2 * h**2)
        gamma = tau / (4 * h)
        
        for step in range(1, Nt + 1):
            t_current = step * tau
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–∑–ª–æ–≤
            for i in range(1, Nx):
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —á–ª–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
                convective_coeff = self.get_convective_coefficient(u_n[i])
                a[i] = gamma * convective_coeff - sigma
                b[i] = 1 + 2 * sigma
                c[i] = -gamma * convective_coeff - sigma
                
                # –ú–∞—Å—Å–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
                if self.mass_operator_cb.isChecked():
                    M = delta * u_n[i-1] + (1 - 2 * delta) * u_n[i] + delta * u_n[i+1]
                else:
                    M = u_n[i]
                    
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ —Ç–æ—á–∫–µ x[i]
                f_val = self.source_function(t_current, x[i])
                
                # –ö–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–π —á–ª–µ–Ω –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
                convective_term = gamma * (self.get_convective_coefficient(u_n[i+1]) * u_n[i+1] - 
                                         self.get_convective_coefficient(u_n[i-1]) * u_n[i-1])
                    
                d[i] = M + convective_term - sigma * (u_n[i-1] - 2 * u_n[i] + u_n[i+1])
                d[i] += tau * f_val
            
            # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            a[0] = 0
            b[0] = 1
            c[0] = -1
            d[0] = 0
            
            a[Nx] = -diffusion_coeff
            b[Nx] = diffusion_coeff + H * h
            c[Nx] = 0
            d[Nx] = H * h * u_env
            
            # –†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            u_new = self.run_through_method(a, b, c, d)
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∫ —Ä–µ—à–µ–Ω–∏—é
            u_new[0] = u_new[1]
            u_new[-1] = (diffusion_coeff * u_new[-2] + H * h * u_env) / (diffusion_coeff + H * h)
            
            u_n = u_new
            
            if step % save_every == 0:
                self.solution_history.append(u_n.copy())
                self.time_points.append(t_current)
        
        return x, u_n, self.time_points

    def solve_control_grid(self, T, Nx, Nt, diffusion_coeff, delta, save_every):
        Nx2 = 2 * Nx
        Nt2 = 2 * Nt
        
        L = 1.0
        h2 = L / Nx2
        tau2 = T / Nt2
        
        x2 = np.linspace(0, L, Nx2 + 1)
        u_n2 = self.get_initial_condition(x2)
        
        u_env = 2/7
        H = 7
        
        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏
        u_n2[0] = u_n2[1]
        u_n2[-1] = (diffusion_coeff * u_n2[-2] + H * h2 * u_env) / (diffusion_coeff + H * h2)
        
        control_solution_history = [u_n2.copy()]
        control_time_points = [0.0]
        self.x_control_values = x2
        
        a = np.zeros(Nx2 + 1)
        b = np.zeros(Nx2 + 1)
        c = np.zeros(Nx2 + 1)
        d = np.zeros(Nx2 + 1)
        
        sigma = diffusion_coeff * tau2 / (2 * h2**2)
        gamma = tau2 / (4 * h2)
        
        for step in range(1, Nt2 + 1):
            t_current = step * tau2
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–∑–ª–æ–≤
            for i in range(1, Nx2):
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —á–ª–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
                convective_coeff = self.get_convective_coefficient(u_n2[i])
                a[i] = gamma * convective_coeff - sigma
                b[i] = 1 + 2 * sigma
                c[i] = -gamma * convective_coeff - sigma
                
                # –ú–∞—Å—Å–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
                if self.mass_operator_cb.isChecked():
                    M = delta * u_n2[i-1] + (1 - 2 * delta) * u_n2[i] + delta * u_n2[i+1]
                else:
                    M = u_n2[i]
                
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ —Ç–æ—á–∫–µ x2[i]
                f_val = self.source_function(t_current, x2[i])
                
                # –ö–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–π —á–ª–µ–Ω –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
                convective_term = gamma * (self.get_convective_coefficient(u_n2[i+1]) * u_n2[i+1] - 
                                         self.get_convective_coefficient(u_n2[i-1]) * u_n2[i-1])
                    
                d[i] = M + convective_term - sigma * (u_n2[i-1] - 2 * u_n2[i] + u_n2[i+1])
                d[i] += tau2 * f_val
            
            # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            a[0] = 0
            b[0] = 1
            c[0] = -1
            d[0] = 0
            
            a[Nx2] = -diffusion_coeff
            b[Nx2] = diffusion_coeff + H * h2
            c[Nx2] = 0
            d[Nx2] = H * h2 * u_env
            
            # –†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            u_new2 = self.run_through_method(a, b, c, d)
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∫ —Ä–µ—à–µ–Ω–∏—é
            u_new2[0] = u_new2[1]
            u_new2[-1] = (diffusion_coeff * u_new2[-2] + H * h2 * u_env) / (diffusion_coeff + H * h2)
            
            u_n2 = u_new2
            
            if step % (2 * save_every) == 0:
                control_solution_history.append(u_n2.copy())
                control_time_points.append(t_current)
        
        self.control_solution_history = control_solution_history
        return x2, u_n2, control_time_points

    def calculate_global_max_diff(self):
        if not self.solution_history or not self.control_solution_history:
            self.global_max_diff = 0.0
            return
            
        max_diff = 0.0
        
        for i in range(len(self.solution_history)):
            u_control_interp = np.interp(
                self.x_values, 
                self.x_control_values, 
                self.control_solution_history[i]
            )
            
            diff = np.abs(u_control_interp - self.solution_history[i])
            layer_max = np.max(diff)
            if layer_max > max_diff:
                max_diff = layer_max
        
        self.global_max_diff = max_diff
        self.stats_global_max_diff.setText(f"{max_diff:.6f}")

    def run_through_method(self, a, b, c, d):
        n = len(d)
        if n < 3:
            return np.linalg.solve(np.diag(b) + np.diag(a[1:], -1) + np.diag(c[:-1], 1), d)
        
        cp = np.zeros(n)
        dp = np.zeros(n)
        x = np.zeros(n)
        
        cp[0] = c[0] / b[0]
        dp[0] = d[0] / b[0]
        
        for i in range(1, n):
            denom = b[i] - a[i] * cp[i-1]
            if abs(denom) < 1e-10:
                denom = 1e-10
            cp[i] = c[i] / denom
            dp[i] = (d[i] - a[i] * dp[i-1]) / denom
        
        x[-1] = dp[-1]
        for i in range(n-2, -1, -1):
            x[i] = dp[i] - cp[i] * x[i+1]
            
        return x
    
    def show_heatmap(self):
        if not self.solution_history:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            return
            
        if self.heatmap_window is None:
            self.heatmap_window = HeatmapWindow(self)
        self.heatmap_window.draw_heatmap(self.x_values, self.time_points, self.solution_history, self.cmap)
        self.heatmap_window.show()

    def draw_empty_layer(self):
        self.layer_fig.clear()
        ax = self.layer_fig.add_subplot(111)
        ax.set_title("–ì—Ä–∞—Ñ–∏–∫ —Å–ª–æ—è")
        ax.set_xlabel("–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, x [–º]")
        ax.set_ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, u")
        ax.set_ylim(self.y_min, self.y_max)
        ax.set_xlim(0, 1)
        ax.grid(True)
        ax.axvline(x=0, color='k', linestyle='-')
        ax.axvline(x=1, color='k', linestyle='-')
        self.layer_canvas.draw()

    def draw_layer(self, layer_index):
        try:
            self.layer_fig.clear()
            ax = self.layer_fig.add_subplot(111)
            
            if not self.solution_history or layer_index >= len(self.solution_history):
                ax.set_title("–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                ax.grid(True)
                self.layer_canvas.draw()
                return
                
            t = self.time_points[layer_index]
            x = self.x_values
            u = self.solution_history[layer_index]
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            y_min = min(np.min(u) - 0.1, self.y_min)
            y_max = max(np.max(u) + 0.1, self.y_max)
            
            ax.plot(x, u, 'b-', label="–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞")
            
            if self.grid_cb.isChecked() and self.control_solution_history:
                u_control = self.control_solution_history[layer_index]
                
                x_control = self.x_control_values
                ax.plot(x_control, u_control, 'r--', linewidth=1, label="–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞")
            
            if self.show_ic_cb.isChecked():
                ic = self.get_initial_condition(self.x_values)
                ax.plot(self.x_values, ic, 'g--', label="–ù–∞—á–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ")
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å–ª–æ–µ–≤
            save_every = int(self.save_every_input.text())
            actual_layer = layer_index * save_every
            
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title = f"–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—è ‚Ññ {actual_layer}, –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–ª–æ–π ‚Ññ {layer_index}, t = {t:.4f} —Å"
            
            ax.set_title(title)
            ax.set_xlabel("–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, x [–º]")
            ax.set_ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, u")
            ax.set_ylim(y_min, y_max)
            ax.set_xlim(0, 1)
            ax.axvline(x=0, color='k', linestyle='-')
            ax.axvline(x=1, color='k', linestyle='-')
            ax.legend()
            ax.grid(True)
            self.layer_canvas.draw()
            self.update_stats(layer_index)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ —Å–ª–æ—è: {e}")

    def create_statistics_text(self, stats):
        return (
            f"–ù–∞—á. —É—Å–ª–æ–≤–∏–µ: {stats['ic']}\n"
            f"–ö–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–π —á–ª–µ–Ω: {stats['convective']}\n"
            f"–í—Ä–µ–º—è —Å–ª–æ—è: {stats['time_point']:.6f}\n"
            f"–ú–∞–∫—Å. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (—Å–ª–æ–π): {stats['max_diff']:.6f}\n"
            f"–ú–∞–∫—Å. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–≤—Å—è —Å–µ—Ç–∫–∞): {stats['global_max_diff']:.6f}\n"
            f"–ú–µ—Å—Ç–æ –º–∞–∫—Å. –æ—Ç–∫–ª. (—Å–ª–æ–π, —É–∑–µ–ª): {stats['max_diff_loc']}\n"
            f"–°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {stats['mean_diff']:.6f}\n"
            f"–ó–Ω–∞—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {stats['source_val']:.4f}\n"
            f"–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏: {stats['grid_size']}\n"
            f"–ú–∞—Å—Å–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {stats['mass_operator']}\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {stats['source']}\n"
            f"–°—Ö–µ–º–∞ —Ä–µ—à–µ–Ω–∏—è: {stats['scheme']}"
        )

    def update_stats(self, layer_index):
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if self.mass_operator_cb.isChecked():
            delta = float(self.delta_input.text())
            mass_operator_status = f"–î–∞ (Œ¥={delta})"
        else:
            mass_operator_status = "–ù–µ—Ç"
            
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if self.source_cb.isChecked():
            source_type = self.source_type_combo.currentText()
            A = self.source_amp_input.text()
            source_status = f"–î–∞ ({source_type}, A={A})"
        else:
            source_status = "–ù–µ—Ç"
            
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —á–ª–µ–Ω–∞
        convective_type = self.convective_type_combo.currentText()
        if convective_type == "Const":
            try:
                C = self.convective_const_input.text()
                convective_status = f"Const (C={C})"
            except:
                convective_status = "Const (C=1.0)"
        else:
            convective_status = convective_type
        
        stats = {
            'ic': self.ic_combo.currentText(),
            'convective': convective_status,
            'time_point': self.time_points[layer_index] if self.time_points else 0.0,
            'max_diff': 0.0,
            'global_max_diff': self.global_max_diff,
            'max_diff_loc': '-',
            'mean_diff': 0.0,
            'source_val': 0.0,
            'grid_size': f"–û—Å–Ω–æ–≤–Ω–∞—è: {self.Nx}√ó{self.Nt}, –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è: {2*self.Nx}√ó{2*self.Nt}",
            'mass_operator': mass_operator_status,
            'source': source_status,
            'scheme': "–ù–µ—è–≤–Ω–∞—è —Å—Ö–µ–º–∞"
        }
        
        if self.solution_history and self.control_solution_history and layer_index < len(self.solution_history):
            u_control_interp = np.interp(
                self.x_values, 
                self.x_control_values, 
                self.control_solution_history[layer_index]
            )
            
            u_main = self.solution_history[layer_index]
            diff = np.abs(u_control_interp - u_main)
            max_diff = np.max(diff)
            max_idx = np.argmax(diff)
            mean_diff = np.mean(diff)
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ —Å—Ä–µ–¥–Ω–µ–π —Ç–æ—á–∫–µ
            x_mid = self.x_values[len(self.x_values)//2]
            source_val = self.source_function(self.time_points[layer_index], x_mid)
            
            stats.update({
                'max_diff': max_diff,
                'mean_diff': mean_diff,
                'max_diff_loc': f"{layer_index}, {max_idx}",
                'source_val': source_val
            })
        
        self.stats_ic.setText(stats['ic'])
        self.stats_convective.setText(stats['convective'])
        self.stats_time_point.setText(f"{stats['time_point']:.6f}")
        self.stats_max_diff.setText(f"{stats['max_diff']:.6f}")
        self.stats_global_max_diff.setText(f"{stats['global_max_diff']:.6f}")
        self.stats_max_diff_loc.setText(stats['max_diff_loc'])
        self.stats_mean_diff.setText(f"{stats['mean_diff']:.6f}")
        self.stats_source_val.setText(f"{stats['source_val']:.4f}")
        self.stats_grid_size.setText(stats['grid_size'])
        self.stats_mass_operator.setText(stats['mass_operator'])
        self.stats_source.setText(stats['source'])
        self.stats_scheme.setText(stats['scheme'])
        
        return stats
    
    def show_solution_table(self):
        if not self.solution_history or not self.control_solution_history:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—á–µ—Ç —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å–µ—Ç–∫–æ–π!")
            return
        
        dialog = SolutionTableDialog(
            self.solution_history,
            self.control_solution_history,
            self.time_points,
            self.x_values,
            self.x_control_values,
            self.Nx,
            self.Nt,
            self
        )
        dialog.setWindowModality(Qt.NonModal)
        dialog.show()
    
    def create_animation(self):
        if not self.solution_history:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏!")
            return
            
        try:
            import imageio
            from PIL import Image
        except ImportError:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", 
                                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n"
                                "pip install imageio pillow")
            return
            
        try:
            temp_dir = tempfile.mkdtemp(prefix='convection_diffusion_animation_')
            filenames = []
            
            progress = QProgressDialog("–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏...", "–û—Ç–º–µ–Ω–∞", 0, len(self.solution_history), self)
            progress.setWindowTitle("–°–æ–∑–¥–∞–Ω–∏–µ GIF")
            progress.setWindowModality(Qt.WindowModal)
            progress.setValue(0)

            for i in range(len(self.solution_history)):
                if progress.wasCanceled():
                    break
                    
                filename = os.path.join(temp_dir, f"frame_{i:05d}.png")
                filenames.append(filename)
                fig = Figure(figsize=(7, 5))
                ax = fig.add_subplot(111)
                t = self.time_points[i]
                x = self.x_values
                u = self.solution_history[i]
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                y_min = min(np.min(u) - 0.1, self.y_min)
                y_max = max(np.max(u) + 0.1, self.y_max)
                
                ax.plot(x, u, 'b-', label="–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞")
                if self.grid_cb.isChecked() and self.control_solution_history:
                    u_control = self.control_solution_history[i]
                    x_control = self.x_control_values
                    ax.plot(x_control, u_control, 'r--', linewidth=1, label="–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞")
                
                if self.show_ic_cb.isChecked():
                    ic = self.get_initial_condition(self.x_values)
                    ax.plot(x, ic, 'g--', label="–ù–∞—á–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ")
                
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å–ª–æ–µ–≤
                save_every = int(self.save_every_input.text())
                actual_layer = i * save_every
                
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
                title = f"–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—è ‚Ññ {actual_layer}, –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–ª–æ–π ‚Ññ {i}, t = {t:.4f} —Å"
                
                ax.set_title(title)
                ax.set_xlabel("–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, x [–º]")
                ax.set_ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, u")
                ax.set_ylim(y_min, y_max)
                ax.set_xlim(0, 1)
                ax.axvline(x=0, color='k', linestyle='-')
                ax.axvline(x=1, color='k', linestyle='-')
                ax.legend()
                ax.grid(True)
                
                fig.savefig(filename, dpi=100)
                plt.close(fig)
                progress.setValue(i+1)
           
            if filenames:
                gif_filename = os.path.join(os.getcwd(), "–ü–æ—Å–ª–æ–π–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.gif")
                with imageio.get_writer(gif_filename, mode='I', duration=0.1) as writer:
                    for filename in filenames:
                        image = imageio.imread(filename)
                        writer.append_data(image)
                
                for filename in filenames:
                    os.remove(filename)
                os.rmdir(temp_dir)
                
                QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–ê–Ω–∏–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {gif_filename}")
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")
            if 'filenames' in locals():
                for filename in filenames:
                    if os.path.exists(filename):
                        os.remove(filename)
            if 'temp_dir' in locals() and os.path.exists(temp_dir):
                os.rmdir(temp_dir)
    
    def save_layer_plot(self):
        if not self.solution_history:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return
            
        layer_index = self.layer_input.value()
        stats = self.update_stats(layer_index)
        
        save_fig = plt.figure(figsize=(12, 6), tight_layout=True)
        gs = save_fig.add_gridspec(1, 2, width_ratios=[2, 1])
        
        ax1 = save_fig.add_subplot(gs[0])
        t = self.time_points[layer_index]
        x = self.x_values
        u = self.solution_history[layer_index]
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        y_min = min(np.min(u) - 0.1, self.y_min)
        y_max = max(np.max(u) + 0.1, self.y_max)
        
        ax1.plot(x, u, 'b-', label="–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞")
        
        if self.grid_cb.isChecked() and self.control_solution_history:
            u_control = self.control_solution_history[layer_index]
            x_control = self.x_control_values
            ax1.plot(x_control, u_control, 'r--', linewidth=1, label="–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞")
        
        if self.show_ic_cb.isChecked():
            ic = self.get_initial_condition(self.x_values)
            ax1.plot(x, ic, 'g--', label="–ù–∞—á–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ")
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å–ª–æ–µ–≤
        save_every = int(self.save_every_input.text())
        actual_layer = layer_index * save_every
        
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title = f"–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—è ‚Ññ {actual_layer}, –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–ª–æ–π ‚Ññ {layer_index}, t = {t:.4f} —Å"
        
        ax1.set_title(title)
        ax1.set_xlabel("–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, x [–º]")
        ax1.set_ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, u")
        ax1.set_ylim(y_min, y_max)
        ax1.set_xlim(0, 1)
        ax1.axvline(x=0, color='k', linestyle='-')
        ax1.axvline(x=1, color='k', linestyle='-')
        ax1.legend()
        ax1.grid(True)
        
        ax2 = save_fig.add_subplot(gs[1])
        ax2.axis('off')
        
        stats_text = self.create_statistics_text(stats)
        ax2.text(0.05, 0.95, stats_text, 
                transform=ax2.transAxes, 
                verticalalignment='top',
                fontsize=10,
                bbox=dict(boxstyle="round,pad=0.5", 
                        facecolor='lightgray', 
                        edgecolor='gray', 
                        alpha=0.5))
        
        options = QFileDialog.Options()
        filename, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–ª–æ—è", "", 
                                                "PNG (*.png);;JPEG (*.jpg *.jpeg);;PDF (*.pdf);;SVG (*.svg)", 
                                                options=options)
        if filename:
            try:
                save_fig.savefig(filename, dpi=300, bbox_inches='tight')
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ì—Ä–∞—Ñ–∏–∫ —Å–ª–æ—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
            finally:
                plt.close(save_fig)
        else:
            plt.close(save_fig)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = ConvectionDiffusionApp()
    window.show()
    sys.exit(app.exec_())